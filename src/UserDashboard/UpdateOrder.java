/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserDashboard;

import config.dbConnector;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Elmer Rapon
 */
public class UpdateOrder extends javax.swing.JInternalFrame {

    /**
     * Creates new form UpdateOrder
     */
    public UpdateOrder() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        drError.setVisible(false);
        itemError.setVisible(false);
        ErrorHandling();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    
    
            
    Color orig = new Color(255,255,255);
    Color newColor =new Color(204,204,204);
    Color origC = new Color(0,0,255);
    
    private void ErrorHandling() {

        drCode.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                drCodes();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                drCodes();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                drCodes();
            }
        });
        
        itemCode.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                productCode();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                productCode();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                productCode();
            }
        });
    }
    
    
            private void drCodes() {
            String dr = drCode.getText();
            if (!checkDRCode(dr)) {
                drError.setVisible(true);
            } else {
                drError.setVisible(false);
            }
        }
            private void productCode() {
            String item = itemCode.getText();
            String dr = drCode.getText();
            if (!checkProductCode(dr, item)) {
                itemError.setVisible(true);
            } else {
                itemError.setVisible(false);
            }
        }

      
    public static boolean checkDRCode(String codes) {
        dbConnector connect = new dbConnector();

        try {
            String query = "SELECT DRNo FROM drgenerator WHERE DRNo = ? AND DRStatus = 'PENDING' ";
            PreparedStatement statement = connect.getConnection().prepareStatement(query);
            statement.setString(1, codes);
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                return true; // Code exists in the database
            } else {
                return false; // Code not found in the database
            }
        } catch(SQLException ex) {
            System.out.println("Connection Error: " + ex);
            return false; // Exception occurred
        }
    }
    
    public static boolean checkProductCode(String codes, String productCode) {
        
        dbConnector connect = new dbConnector();
        try {
        String verifyProductQuery = "SELECT * FROM orderform WHERE DRNumber = ? AND ProductID = ?";
       
        try (Connection conn = connect.getConnection();
             PreparedStatement verifyPst = conn.prepareStatement(verifyProductQuery)) {

            verifyPst.setString(1, codes);
            verifyPst.setString(2, productCode);
            ResultSet verifyResultSet = verifyPst.executeQuery();
            
            if (!verifyResultSet.next()) {
                return true;
            }else{
                return false;
            }

            }
        } catch(SQLException ex) {
            System.out.println("Connection Error: " + ex);
            return false; // Exception occurred
        }
    }
       
    public static double getProductPrice(String productCode) {
        double productPrice = 0.0;
        dbConnector connector = new dbConnector();
        try {
            String query = "SELECT P_Price FROM product_information WHERE P_Code = '" + productCode + "'";
            ResultSet resultSet = connector.getData(query);
            if (resultSet.next()) {
                productPrice = resultSet.getDouble("P_Price");
            } else {
                JOptionPane.showMessageDialog(null, "Invalid product code!");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Database Connection Error!");
        }
        return productPrice;
    }
    
    private void addToOutput(Connection conn, String productCode, int quantity, Date manDate, Date exDate) throws SQLException {
        String selectOutputQuery = "SELECT * FROM output WHERE product_ID = ? AND O_ManufacturingDate = ? AND O_ExpiryDate = ?";
        
        try (PreparedStatement pstOutput = conn.prepareStatement(selectOutputQuery)) {
            pstOutput.setString(1, productCode);
            pstOutput.setDate(2, (java.sql.Date) manDate);
            pstOutput.setDate(3, (java.sql.Date) exDate);
            ResultSet resultSetOutput = pstOutput.executeQuery();

            if (resultSetOutput.next()) {
                // Entry exists, update the quantity
                int outputId = resultSetOutput.getInt("output_ID");
                int currentQuantity = resultSetOutput.getInt("O_Quantity");
                int newQuantity = currentQuantity + quantity;

                String updateOutputQuery = "UPDATE output SET O_Quantity = ? WHERE output_ID = ?";
                try (PreparedStatement updateOutputPst = conn.prepareStatement(updateOutputQuery)) {
                    updateOutputPst.setInt(1, newQuantity);
                    updateOutputPst.setInt(2, outputId);
                    updateOutputPst.executeUpdate();
                }
            } else {
                // Entry does not exist, insert a new row
                String insertOutputQuery = "INSERT INTO output (product_ID, O_Quantity, O_ManufacturingDate, O_ExpiryDate, O_Status) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement insertOutputPst = conn.prepareStatement(insertOutputQuery)) {
                    insertOutputPst.setString(1, productCode);
                    insertOutputPst.setInt(2, quantity);
                    insertOutputPst.setDate(3, (java.sql.Date) manDate);
                    insertOutputPst.setDate(4, (java.sql.Date) exDate);
                    insertOutputPst.setString(5, "IN STOCK");
                    insertOutputPst.executeUpdate();
                }
            }
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        drCode = new javax.swing.JTextField();
        drError = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        itemCode = new javax.swing.JTextField();
        itemError = new javax.swing.JLabel();
        iOK = new javax.swing.JLabel();
        OName = new javax.swing.JLabel();
        OFlavor = new javax.swing.JLabel();
        Oquan = new javax.swing.JLabel();
        quantity = new javax.swing.JLabel();
        OPrice = new javax.swing.JLabel();
        quantit = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        done = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jPanel1.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(50, 150, 122), 1, true));
        jPanel2.setLayout(null);

        jLabel2.setForeground(new java.awt.Color(50, 150, 122));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Enter DR Number:");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(10, 10, 170, 20);

        drCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(50, 150, 122)));
        jPanel2.add(drCode);
        drCode.setBounds(20, 30, 150, 22);

        drError.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        drError.setForeground(new java.awt.Color(255, 0, 51));
        drError.setText("!DR Number doesn't Exist");
        jPanel2.add(drError);
        drError.setBounds(20, 50, 150, 20);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(560, 10, 190, 80);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(50, 150, 122)));
        jPanel3.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(50, 150, 122));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Item Description");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        jPanel3.add(jLabel1);
        jLabel1.setBounds(220, 10, 500, 40);

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(50, 150, 122), 1, true));
        jPanel5.setLayout(null);

        jLabel5.setForeground(new java.awt.Color(50, 150, 122));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Enter Item Code:");
        jPanel5.add(jLabel5);
        jLabel5.setBounds(10, 10, 130, 20);

        itemCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(50, 150, 122)));
        jPanel5.add(itemCode);
        itemCode.setBounds(10, 30, 130, 22);

        itemError.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        itemError.setForeground(new java.awt.Color(255, 0, 51));
        itemError.setText(" !Item not found");
        jPanel5.add(itemError);
        itemError.setBounds(10, 50, 130, 20);

        iOK.setBackground(new java.awt.Color(255, 255, 255));
        iOK.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        iOK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iOK.setText("OK");
        iOK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        iOK.setOpaque(true);
        iOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iOKMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                iOKMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                iOKMouseExited(evt);
            }
        });
        jPanel5.add(iOK);
        iOK.setBounds(150, 30, 30, 21);

        jPanel3.add(jPanel5);
        jPanel5.setBounds(10, 10, 190, 80);

        OName.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        OName.setForeground(new java.awt.Color(50, 150, 122));
        OName.setText("Name:");
        OName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        OName.setOpaque(true);
        jPanel3.add(OName);
        OName.setBounds(230, 60, 470, 30);

        OFlavor.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        OFlavor.setForeground(new java.awt.Color(50, 150, 122));
        OFlavor.setText("Flavor");
        OFlavor.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        OFlavor.setOpaque(true);
        jPanel3.add(OFlavor);
        OFlavor.setBounds(230, 100, 470, 30);

        Oquan.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        Oquan.setForeground(new java.awt.Color(50, 150, 122));
        Oquan.setText("No. of Item Ordered: ");
        Oquan.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        Oquan.setOpaque(true);
        jPanel3.add(Oquan);
        Oquan.setBounds(230, 220, 190, 30);

        quantity.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        quantity.setForeground(new java.awt.Color(50, 150, 122));
        quantity.setText("Quantity:");
        quantity.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        quantity.setOpaque(true);
        jPanel3.add(quantity);
        quantity.setBounds(230, 140, 470, 30);

        OPrice.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        OPrice.setForeground(new java.awt.Color(50, 150, 122));
        OPrice.setText("Price: ");
        OPrice.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        OPrice.setOpaque(true);
        jPanel3.add(OPrice);
        OPrice.setBounds(230, 180, 470, 30);

        quantit.setBackground(new java.awt.Color(240, 240, 240));
        quantit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        quantit.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        quantit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantitActionPerformed(evt);
            }
        });
        jPanel3.add(quantit);
        quantit.setBounds(420, 220, 280, 30);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(20, 180, 730, 260);

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(50, 150, 122));
        jLabel3.setText("ORDER FORM");
        jLabel3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 10, 530, 40);

        back.setBackground(new java.awt.Color(255, 255, 255));
        back.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        back.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        back.setText("BACK");
        back.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        back.setOpaque(true);
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backMouseExited(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(310, 570, 160, 30);

        done.setBackground(new java.awt.Color(255, 255, 255));
        done.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        done.setForeground(new java.awt.Color(255, 0, 51));
        done.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        done.setText("CANCEL ORDER");
        done.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        done.setOpaque(true);
        done.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doneMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doneMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doneMouseExited(evt);
            }
        });
        jPanel1.add(done);
        done.setBounds(310, 530, 160, 30);

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("NOTE: This is the cancellation of the quantity of a specific products you have ordered!");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 440, 730, 20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iOKMouseClicked
        // TODO add your handling code here:
        
        dbConnector dbc = new dbConnector();
        String code = itemCode.getText();
        if (code.isEmpty()) {
            JOptionPane.showMessageDialog(null, "INPUT PRODUCT CODE FIRST", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            // Corrected SQL query with parameterized query to prevent SQL injection
            String sql = "SELECT pi.P_Name, pi.P_Flavor, pi.P_Price, SUM(of.OrderQuantity) AS TotalQuantity " +
                    "FROM orderform of " +
                    "JOIN product_information pi ON pi.P_Code = of.ProductID " +
                    "WHERE of.ProductID = ? AND of.OrderStatus = 'PENDING' " +
                    "GROUP BY pi.P_Name, pi.P_Flavor, pi.P_Price";
            
            try (Connection conn = dbc.getConnection();
                    PreparedStatement pst = conn.prepareStatement(sql)) {
                
                pst.setString(1, code);
                ResultSet rs = pst.executeQuery();
                
                if (rs.next()) {
                    String productName = rs.getString("P_Name");
                    String productFlavor = rs.getString("P_Flavor");
                    int productPrice = rs.getInt("P_Price");
                    int totalQuantity = rs.getInt("TotalQuantity");
                    
                    OName.setText("Name: " + productName);
                    OFlavor.setText("Flavor: " + productFlavor);
                    OPrice.setText("Price: " + productPrice);
                    quantity.setText("Quantity: " + totalQuantity);
                } else {
                    // No rows found
                    JOptionPane.showMessageDialog(null, "NO PRODUCT FOUND", "Error", JOptionPane.ERROR_MESSAGE);
                    OName.setText("Name: ");
                    OFlavor.setText("Flavor: ");
                    OPrice.setText("Price: ");
                    quantity.setText("Quantity: ");
                }
            } catch (SQLException ex) {
                System.out.println("Invalid Connection: " + ex.getMessage());
            }
        }
      
    }//GEN-LAST:event_iOKMouseClicked

    private void iOKMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iOKMouseEntered
        // TODO add your handling code here:
        iOK.setBackground(newColor);

    }//GEN-LAST:event_iOKMouseEntered

    private void iOKMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iOKMouseExited
        // TODO add your handling code here:
        iOK.setBackground(orig);
    }//GEN-LAST:event_iOKMouseExited

    private void quantitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantitActionPerformed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
        OrderTransactions ot = new OrderTransactions();
        JDesktopPane desktopPane = (JDesktopPane) getParent();
        desktopPane.add(ot);
        ot.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_backMouseClicked

    private void backMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseEntered
        // TODO add your handling code here:
        back.setBackground(newColor);

    }//GEN-LAST:event_backMouseEntered

    private void backMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseExited
        // TODO add your handling code here:
        back.setBackground(orig);
    }//GEN-LAST:event_backMouseExited

    private void doneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneMouseClicked
        dbConnector connect = new dbConnector();
        String DRCode = drCode.getText();
        String productCode = itemCode.getText();
        String quantity = quantit.getText();

        if (DRCode.isEmpty() || productCode.isEmpty() || quantity.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Fill in all the fields", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int quan;
        try {
            quan = Integer.parseInt(quantity);
            if (quan <= 0) {
                JOptionPane.showMessageDialog(null, "Quantity must be a positive number", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid quantity", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String verifyProductQuery = "SELECT * FROM orderform WHERE DRNumber = ? AND ProductID = ?";
        try (Connection conn = connect.getConnection();
             PreparedStatement verifyPst = conn.prepareStatement(verifyProductQuery)) {

            verifyPst.setString(1, DRCode);
            verifyPst.setString(2, productCode);
            ResultSet verifyResultSet = verifyPst.executeQuery();

            if (!verifyResultSet.next()) {
                JOptionPane.showMessageDialog(null, "Product code not found for the given DR number", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String query = "SELECT * FROM orderform WHERE DRNumber = ? AND ProductID = ? ORDER BY ExpiryDate ASC, ManufacturingDate ASC";
            try (PreparedStatement pstOrder = conn.prepareStatement(query)) {

                pstOrder.setString(1, DRCode);
                pstOrder.setString(2, productCode);
                ResultSet resultSetOrder = pstOrder.executeQuery();

                conn.setAutoCommit(false); // Start transaction

                double totalAmount = 0.0;

                while (resultSetOrder.next() && quan > 0) {
                    int orderQuantity = resultSetOrder.getInt("OrderQuantity");
                    double orderTotalAmount = resultSetOrder.getDouble("O_TotalAmount");
                    Date manDate = resultSetOrder.getDate("ManufacturingDate");
                    Date exDate = resultSetOrder.getDate("ExpiryDate");

                    double unitPrice = orderTotalAmount / orderQuantity;

                    if (orderQuantity == quan) {
                        JOptionPane.showMessageDialog(null, "Your inputted quantity is the same as the original order quantity", "Error", JOptionPane.ERROR_MESSAGE);
                        conn.rollback();
                        return;
                    } else if (orderQuantity <= quan) {
                        // Add the whole order quantity back to output and remove from orderform
                        addToOutput(conn, productCode, orderQuantity, manDate, exDate);
                        totalAmount += orderQuantity * unitPrice;
                        quan -= orderQuantity;

                        // Delete from orderform
                        String deleteOrderQuery = "DELETE FROM orderform WHERE DRNumber = ? AND ProductID = ? AND ManufacturingDate = ? AND ExpiryDate = ?";
                        try (PreparedStatement deleteOrderPst = conn.prepareStatement(deleteOrderQuery)) {
                            deleteOrderPst.setString(1, DRCode);
                            deleteOrderPst.setString(2, productCode);
                            deleteOrderPst.setDate(3, (java.sql.Date) manDate);
                            deleteOrderPst.setDate(4, (java.sql.Date) exDate);
                            deleteOrderPst.executeUpdate();
                        }
                    } else {
                        // Partially add the quantity back to output and update orderform
                        addToOutput(conn, productCode, quan, manDate, exDate);
                        totalAmount += quan * unitPrice;

                        int newOrderQuantity = orderQuantity - quan;
                        double newTotalAmount = newOrderQuantity * unitPrice; // Calculate new total amount
                        quan = 0;

                        // Update the orderform with the new reduced quantity and total amount
                        String updateOrderQuery = "UPDATE orderform SET OrderQuantity = ?, O_TotalAmount = ? WHERE DRNumber = ? AND ProductID = ? AND ManufacturingDate = ? AND ExpiryDate = ?";
                        try (PreparedStatement updateOrderPst = conn.prepareStatement(updateOrderQuery)) {
                            updateOrderPst.setInt(1, newOrderQuantity);
                            updateOrderPst.setDouble(2, newTotalAmount);
                            updateOrderPst.setString(3, DRCode);
                            updateOrderPst.setString(4, productCode);
                            updateOrderPst.setDate(5, (java.sql.Date) manDate);
                            updateOrderPst.setDate(6, (java.sql.Date) exDate);
                            updateOrderPst.executeUpdate();
                        }
                    }
                }

                if (quan > 0) {
                    conn.rollback(); // Rollback transaction if there is an inconsistency
                    JOptionPane.showMessageDialog(null, "Insufficient ordered quantity to cancel.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    conn.commit(); // Commit transaction
                    JOptionPane.showMessageDialog(null, "Product cancellation successful!", "Message", JOptionPane.INFORMATION_MESSAGE);
                    DRTransactions dr = new DRTransactions();
                    JDesktopPane desktopPane = (JDesktopPane) getParent();
                    desktopPane.add(dr);
                    dr.setVisible(true);
                    setVisible(false);
                }
            }
        } catch (SQLException ex) {
            System.out.println("SQLException: " + ex.getMessage());
        }
                
    }//GEN-LAST:event_doneMouseClicked

    private void doneMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneMouseEntered
        // TODO add your handling code here:
        done.setBackground(newColor);
    }//GEN-LAST:event_doneMouseEntered

    private void doneMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneMouseExited
        // TODO add your handling code here:
        done.setBackground(orig);
    }//GEN-LAST:event_doneMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel OFlavor;
    public javax.swing.JLabel OName;
    public javax.swing.JLabel OPrice;
    public javax.swing.JLabel Oquan;
    private javax.swing.JLabel back;
    private javax.swing.JLabel done;
    private javax.swing.JTextField drCode;
    private javax.swing.JLabel drError;
    private javax.swing.JLabel iOK;
    private javax.swing.JTextField itemCode;
    private javax.swing.JLabel itemError;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField quantit;
    public javax.swing.JLabel quantity;
    // End of variables declaration//GEN-END:variables
}
